package huffman;

import java.io.*;
import java.util.*;

/** program to find compression ratio using Huffman coding
 */

class WeightComparator implements Comparator<Node> {
    public int compare(Node first, Node second)
    {
        return first.weight - second.weight;
    }
}
public class Main {

	public static void main(String[] args) throws IOException {

		long start = System.currentTimeMillis();
		String inputFileName = args[0];
		FileReader reader = new FileReader(inputFileName);
		Scanner in = new Scanner(reader);
		
		// read in the data
		HashMap<Character, Integer> frequencies = new HashMap<Character, Integer>();
		frequencies.put('\n', 0);
		
		int ogLength = 0;
		while(in.hasNext()) {
			String line = in.nextLine();
			//System.out.println(line);
			for(int i = 0; i < line.length(); i++) {
				char character = line.charAt(i);
				if (frequencies.get(character) == null) frequencies.put(character, 0);
				frequencies.put(character, frequencies.get(character) + 1);
				ogLength++;
				//System.out.println(character + " " + ogLength);
			}
			if (line.length() == 0) System.out.println("Line empty!");
			frequencies.put('\n', frequencies.get('\n') + 1);
			ogLength++;
		}
		
		// build Huffman tree
		// add all parentless nodes
		PriorityQueue<Node> parentless_nodes = new PriorityQueue<Node>(frequencies.size(), new WeightComparator());
		for(Map.Entry<Character, Integer> entry : frequencies.entrySet()) {
			Node node = new Node(entry.getKey(), entry.getValue());
			parentless_nodes.add(node);
		}
		// add internal nodes, keeping in mind the weighted path length
		int wpl = 0;
		while (parentless_nodes.size() > 0) {
			Node x = parentless_nodes.poll();
			Node y = parentless_nodes.poll();
			int sum = x.getWeight() + y.getWeight();
			Node parent = new Node(' ', sum);
			parent.leftChild = x;
			parent.rightChild = y;
			wpl += sum;
		}
		
		int compressedLength = Integer.MAX_VALUE;
		float ratio = 1;

		reader.close();
		in.close();
		
		
		// output the results here
		System.out.println("Original file length in bits = " + ogLength * 8);
		System.out.println("Compressed file length in bits = " + compressedLength);
		System.out.println("Compression ratio = " + ratio);
		// end timer and print elapsed time as last line of output
		long end = System.currentTimeMillis();
		System.out.println("Elapsed time: " + (end - start) + " milliseconds");
	}

}
