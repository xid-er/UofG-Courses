package huffman;

import java.io.*;
import java.util.*;

/** program to find compression ratio using Huffman coding
 */
public class Main {

	public static void main(String[] args) throws IOException {

		long start = System.currentTimeMillis();
		String inputFileName = args[0];
		FileReader reader = new FileReader(inputFileName);
		Scanner in = new Scanner(reader);
		
		// read in the data and do the work here
		// read a line at a time to enable newlines to be detected and included in the compression
		HashMap<Character, Integer> frequencies = new HashMap<Character, Integer>();
		frequencies.put('\n', 0);
		
		int ogLength = 0;
		while(in.hasNext()) {
			String line = in.nextLine();
			//System.out.println(line);
			for(int i = 0; i < line.length(); i++) {
				char character = line.charAt(i);
				if (frequencies.get(character) == null) frequencies.put(character, 0);
				frequencies.put(character, frequencies.get(character) + 1);
				ogLength++;
				//System.out.println(character + " " + ogLength);
			}
			if (line.length() == 0) System.out.println("Line empty!");
			frequencies.put('\n', frequencies.get('\n') + 1);
			ogLength++;
		}
		
		for(Map.Entry<Character, Integer> entry : frequencies.entrySet()) {
			Node node = new Node(entry.getKey(), entry.getValue());
		}
		
		int compressedLength = Integer.MAX_VALUE;
		float ratio = 1;

		reader.close();
		in.close();
		
		
		// output the results here
		System.out.println("Original file length in bits = " + ogLength * 8);
		System.out.println("Compressed file length in bits = " + compressedLength);
		System.out.println("Compression ratio = " + ratio);
		// end timer and print elapsed time as last line of output
		long end = System.currentTimeMillis();
		System.out.println("Elapsed time: " + (end - start) + " milliseconds");
	}

}
